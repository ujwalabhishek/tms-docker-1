<?phpclass Reports extends CI_Controller {    /**     * Constructor     */        private $user;        public function __construct() {        parent::__construct();        $this->load->model('reports_model', 'reportsModel');        $this->load->model('course_model', 'courseModel');        $this->load->model('class_model', 'classModel');        $this->load->model('tenant_model', 'tenantModel');        $this->load->model('class_trainee_model', 'classtraineemodel');         $this->load->model('trainee_model', 'traineemodel');        $this->load->model('internal_user_model', 'users');        $this->load->helper('common');        $this->load->helper('metavalues_helper');        $this->load->model('meta_values', 'meta');                       $this->user = $this->session->userdata('userDetails');        $this->tenant_id = $this->session->userdata('userDetails')->tenant_id;    }    /**     * Reports General Static Page     */    public function index() {        $data['sideMenuData'] = fetch_non_main_page_content();        $data['page_title'] = 'Reports';        $data['main_content'] = 'reports/reports';        $this->load->view('layout', $data);    }    /**     * Trainee Feedback Report     */        //// added by shubhranshu to fetch sales report/////////////    public function sales_report(){        $data['sideMenuData'] = fetch_non_main_page_content();        $data['fetch_all_tenant'] = $this->reportsModel->fetch_all_tenants();                $tenant_id =  $this->input->get('tenant_name');        $start =  $this->input->get('start_date');        $end =  $this->input->get('end_date');        $payment_status =  $this->input->get('payment_status');        $training_score =  $this->input->get('training_score');        if(!empty($tenant_id) && !empty($start) && !empty($end)){            $result = $this->reportsModel->fetch_all_sales_data($tenant_id,$start,$end,$payment_status,$training_score);        }               $data['main_content'] = 'reports/sales_report';        $this->load->view('layout', $data);    }    //// added by shubhranshu to fetch sales report/////////////    public function trainee_feedback() {        $data['sideMenuData'] = fetch_non_main_page_content();        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $data['tenant_id']= $tenant_id;        $course_id = $this->input->post('course_id');        $class_id = $this->input->post('class_id');                $type = $this->input->post('type');        $courses = $this->reportsModel->get_class_courses($tenant_id);        if (empty($course_id)) {            $course_id = key($courses);        }        $data['feedback'] = $this->reportsModel->get_trainee_feedback($tenant_id, $course_id, $class_id);        if(!empty($type) && $type == 'trainer') {            $trainee_user_id = $this->input->post('trainee_user_id');            $this->load->model('trainee_model', 'traineemodel');            $result = $this->traineemodel->trainer_feedback($trainee_user_id, $course_id, $class_id);            if ($result == TRUE) {                $data["success"] = "Your feedback has been updated successfully.";            } else {                $data["error"] = "We have not been able to save the feedback.Please try again later or get in touch with your Administrator.";            }        } else if(!empty($type) && $type == 'trainee') {             $trainee_id = $this->input->post('trainee_id');            $result = $this->reportsModel->save_feedback($tenant_id, $class_id, $course_id, $trainee_id);            if ($result == TRUE) {                $data["success"] = "Trainee feedback has been updated successfully.";            } else {                $data["error"] = "We have not been able to save the feedback.Please try again later or get in touch with your Administrator.";            }                    }        if (!empty($class_id)) {            $classes = $this->courseModel->get_classes_active_enrollment_certificate_courses($course_id)->result();            $data['classes'][0] = 'Select Class';            foreach ($classes as $class_row) {                $data['classes'][$class_row->class_id] = $class_row->class_name;            }            $results = $this->reportsModel->get_trainee_feedbacks($tenant_id, $course_id, $class_id);            $results = date_format_singapore_for_array($results, 'feedback_date');        } else {            $data['classes'][0] = 'Select Class';        }        $data['courses'][0] = 'Select Course';        foreach ($courses as $key => $val) {            $data['courses'][$key] = $val;        }        $data['tabledata'] = $results;        $data['page_title'] = 'General Reports - Trainee Feedbacks';        $data['main_content'] = 'reports/trainee_feedback';        $this->load->view('layout', $data);    }    /**     * Trainee Feedback Export to XLS     * @return type     */    public function xls_trainee_feedback() {        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get('course_id');        $class_id = $this->input->get('class_id');        $json = $this->input->get('json');        $results = $this->reportsModel->get_trainee_feedback_for_report($tenant_id, $course_id, $class_id);        $results = date_format_singapore_for_array($results, 'feedback_date');        $this->load->helper('export_helper');        $class_details = $this->classModel->get_class_details_for_report($tenant_id, $course_id, $class_id);        if (empty($results)) {            if ($json == 1) {                echo 'false';                exit();            }            $this->session->set_flashdata("error", "There is no trainee feedback available in the class.");            redirect('reports/trainee_feedback');        }        if ($json == 1) {            echo 'true';            exit();        }        export_trainee_feedback($results, $class_details);    }    /**     * Trainer Feedback - Prints Empty Trainee Feedback Form for taking Manual Feedback     * @return type     */    public function print_feedback_form() {        $this->load->helper('pdf_reports_helper');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $tenant_details = $this->tenantModel->get_tenant_details($tenant_id);        return generate_feedback_pdf($tenant_details);    }    /**     * View Trainee Feedback in Detail     */    public function view_trainee_feedback() {        $data['sideMenuData'] = fetch_non_main_page_content();        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get('course_id');        $class_id = $this->input->get('class_id');        $user_id = $this->input->get('user_id');        $data['heading'] = 'Trainee Feedback given by ';        $data['trainee_name'] = $this->input->get('trainee_name');        $data['tabledata'] = $this->reportsModel->get_trainee_feedback_by_user_id($tenant_id, $course_id, $class_id, $user_id);        $data['course_id'] = $course_id;        $data['class_id'] = $class_id;        $data['user_id'] = $user_id;                ///added by shubhranshu for wablab        if($tenant_id == 'T20' || $tenant_id == 'T17'){            $this->load->view('reports/view_trainee_feedback_wablab', $data);        }else{            $this->load->view('reports/view_trainee_feedback', $data);        }            }    /**     * View Trainer Feedback in Detail     */    public function view_trainer_feedback() {        $data['sideMenuData'] = fetch_non_main_page_content();        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get('course_id');        $class_id = $this->input->get('class_id');        $user_id = $this->input->get('user_id');        $data['heading'] = 'Trainer Feedback given to ';        $data['trainee_name'] = $this->input->get('trainee_name');        $data['tabledata'] = $this->reportsModel->get_trainer_feedback_by_user_id($tenant_id, $course_id, $class_id, $user_id);        $data['course_id'] = $course_id;        $data['class_id'] = $class_id;        $data['user_id'] = $user_id;        $this->load->view('reports/view_trainer_feedback', $data);    }    /**     * Convert the trainee feedback data to PDF, called from the View Trainee feedback Pop-up window     * @return type     */    public function print_trainee_feedback() {        $this->load->helper('pdf_reports_helper');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get('course_id');        $class_id = $this->input->get('class_id');        $user_id = $this->input->get('user_id');        $user_details = $this->reportsModel->get_trainee_details($tenant_id, $user_id);        $class_details = $this->classModel->get_class_details($tenant_id, $class_id);        $user_details->class_title = $class_details->class_name;        $user_details->class_end_datetime = $class_details->class_end_datetime;        $user_details->course_title = $this->courseModel->get_course_detailse($course_id)->crse_name;        $feedbackData = $this->reportsModel->get_trainee_feedback_by_user_id($tenant_id, $course_id, $class_id, $user_id);        $feedbackData['Q01']['feedback_answer'] = empty($feedbackData['Q01']['feedback_answer']) ? '--' : $feedbackData['Q01']['feedback_answer'];        $feedbackData['Q02']['feedback_answer'] = empty($feedbackData['Q02']['feedback_answer']) ? '--' : $feedbackData['Q02']['feedback_answer'];        $feedbackData['Q03']['feedback_answer'] = empty($feedbackData['Q03']['feedback_answer']) ? '--' : $feedbackData['Q03']['feedback_answer'];        $feedbackData['Q04']['feedback_answer'] = empty($feedbackData['Q04']['feedback_answer']) ? '--' : $feedbackData['Q04']['feedback_answer'];        $feedbackData['Q05']['feedback_answer'] = empty($feedbackData['Q05']['feedback_answer']) ? '--' : $feedbackData['Q05']['feedback_answer'];        $feedbackData['Q06']['feedback_answer'] = empty($feedbackData['Q06']['feedback_answer']) ? '--' : $feedbackData['Q06']['feedback_answer'];        $feedbackData['Q07']['feedback_answer'] = empty($feedbackData['Q07']['feedback_answer']) ? '--' : $feedbackData['Q07']['feedback_answer'];        $feedbackData['Q08']['feedback_answer'] = empty($feedbackData['Q08']['feedback_answer']) ? '--' : $feedbackData['Q08']['feedback_answer'];        $feedbackData['Q09']['feedback_answer'] = empty($feedbackData['Q09']['feedback_answer']) ? '--' : $feedbackData['Q09']['feedback_answer'];        $feedbackData['Q10']['feedback_answer'] = empty($feedbackData['Q10']['feedback_answer']) ? '--' : $feedbackData['Q10']['feedback_answer'];        $feedbackData['Q11']['feedback_answer'] = empty($feedbackData['Q11']['feedback_answer']) ? '--' : $feedbackData['Q11']['feedback_answer'];        $feedbackData['Q12']['feedback_answer'] = empty($feedbackData['Q12']['feedback_answer']) ? '--' : $feedbackData['Q12']['feedback_answer'];        $feedbackData['Q13']['feedback_answer'] = empty($feedbackData['Q13']['feedback_answer']) ? '--' : $feedbackData['Q13']['feedback_answer'];        $feedbackData['Q14']['feedback_answer'] = empty($feedbackData['Q14']['feedback_answer']) ? '--' : $feedbackData['Q14']['feedback_answer'];        $feedbackData['Q15']['feedback_answer'] = empty($feedbackData['Q15']['feedback_answer']) ? '--' : $feedbackData['Q15']['feedback_answer'];        $feedbackData['Q16']['feedback_answer'] = empty($feedbackData['Q16']['feedback_answer']) ? '--' : $feedbackData['Q16']['feedback_answer'];        $remarks = $this->reportsModel->get_trainee_remarks($tenant_id, $course_id, $class_id, $user_id);                $feedbackData['rating']['feedback_answer'] = $remarks->trainee_feedback_rating;                $feedbackData['remarks']['feedback_answer'] = $remarks->other_remarks_trainee;                        $tenant_details = $this->tenantModel->get_tenant_details($tenant_id);        $tenant_details->tenant_country = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_country), ', ');        if($tenant_id == 'T20' || $tenant_id == 'T17'){            return tranee_feedback_pdf_wablab($feedbackData, $tenant_details, $user_details);        }else{            return tranee_feedback_pdf($feedbackData, $tenant_details, $user_details);        }            }    /**     * Convert the trainer feedback data to PDF, called from the View Trainer feedback Pop-up window     * @return type     */    public function print_trainer_feedback() {        $this->load->helper('pdf_reports_helper');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get('course_id');        $class_id = $this->input->get('class_id');        $user_id = $this->input->get('user_id');        $user_details = $this->reportsModel->get_trainee_details($tenant_id, $user_id);        $class_details = $this->classModel->get_class_details($tenant_id, $class_id);        $user_details->class_title = $class_details->class_name;        $user_details->class_end_datetime = $class_details->class_end_datetime;        $user_details->course_title = $this->courseModel->get_course_detailse($course_id)->crse_name;        $feedbackData = $this->reportsModel->get_trainer_feedback_by_user_id($tenant_id, $course_id, $class_id, $user_id);        $feedbackData['CERTCOLDT']['feedback_answer'] = empty($feedbackData['CERTCOLDT']['feedback_answer']) ? '--' : $feedbackData['CERTCOLDT']['feedback_answer'];        $feedbackData['SATSRATE']['feedback_answer'] = empty($feedbackData['SATSRATE']['feedback_answer']) ? '--' : $feedbackData['SATSRATE']['feedback_answer'];        $feedbackData['CERTCOM1']['feedback_answer'] = empty($feedbackData['CERTCOM1']['feedback_answer']) ? '--' : $feedbackData['CERTCOM1']['feedback_answer'];        $feedbackData['APPKNLSKL']['feedback_answer'] = empty($feedbackData['APPKNLSKL']['feedback_answer']) ? '--' : $feedbackData['APPKNLSKL']['feedback_answer'];        $feedbackData['EXPJOBSCP']['feedback_answer'] = empty($feedbackData['EXPJOBSCP']['feedback_answer']) ? '--' : $feedbackData['EXPJOBSCP']['feedback_answer'];        $feedbackData['RT3MNTHS']['feedback_answer'] = empty($feedbackData['RT3MNTHS']['feedback_answer']) ? '--' : $feedbackData['RT3MNTHS']['feedback_answer'];        $feedbackData['DTCOMMEMP']['feedback_answer'] = empty($feedbackData['DTCOMMEMP']['feedback_answer']) ? '--' : $feedbackData['DTCOMMEMP']['feedback_answer'];        $feedbackData['COMYTCOM']['feedback_answer'] = empty($feedbackData['COMYTCOM']['feedback_answer']) ? '--' : $feedbackData['COMYTCOM']['feedback_answer'];        $feedbackData['COMMNTS']['feedback_answer'] = empty($feedbackData['COMMNTS']['feedback_answer']) ? '--' : $feedbackData['COMMNTS']['feedback_answer'];        $tenant_details = $this->tenantModel->get_tenant_details($tenant_id);        $tenant_details->tenant_country = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_country), ', ');        return traner_feedback_pdf($feedbackData, $tenant_details,$user_details);    }    /**     * Reports General - Attendance     * @return type     */    public function attendance() {        $data['sideMenuData'] = fetch_non_main_page_content();        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $sort_by = $this->input->get('b');        $sort_order = $this->input->get('o');        $course_id = $this->input->post('course_id');        $class_id = $this->input->post('class_id');        $subsidy = $this->input->post('subsidy');        $attendance_status = $this->input->post('attendance_status');        $from_date = parse_date($this->input->post('from_date'), CLIENT_DATE_FORMAT);        $to_date = parse_date($this->input->post('to_date'), CLIENT_DATE_FORMAT);        if (!$from_date) {            $class_details = $this->classModel->get_class_by_id($tenant_id, $course_id, $class_id);            $from_date = parse_date($class_details->class_start_datetime, SERVER_DATE_TIME_FORMAT);            $to_date = parse_date($class_details->class_end_datetime, SERVER_DATE_TIME_FORMAT);        }        $week_start_date = parse_date($this->input->post('week_start'), CLIENT_DATE_FORMAT);        $week = $this->input->post('week');        $export = $this->input->post('export');        $this->load->helper('attendance_helper');        if (!empty($export)) {            $class_details = $this->classModel->get_class_details_for_report($tenant_id, $course_id, $class_id);            $class_start = parse_date($class_details->class_start_datetime, SERVER_DATE_TIME_FORMAT);            $class_end = parse_date($class_details->class_end_datetime, SERVER_DATE_TIME_FORMAT);            if (empty($class_start)) {                $class_start = new DateTime();            }            if (empty($class_end)) {                $class_end = clone $class_start;            }                        $results = $tabledata = $this->classtraineemodel->get_class_trainee_list_for_attendance($tenant_id, $course_id, $class_id, $subsidy, $class_start, $class_end, $sort_by, $sort_order,$attendance_status);                        if ($attendance_status == 'ab' || $attendance_status == 'pr') {                $date1 = $class_start->format('Y-m-d');                $date2 = $class_end->format('Y-m-d');                                if (strtotime($date2) > strtotime(date('Y-m-d'))) {                    $date2 = date('Y-m-d');                }                if (strtotime($date2) < strtotime($date1)) {                    $user_present = array();                    $data['tabledata'] = array();                } else {                    $second_diff = strtotime($date2) - strtotime($date1);                    $interval = floor($second_diff / 3600 / 24);                                  $user_present = array();                    foreach ($tabledata as $row) {                        if ($row['user_count'] == ($interval + 1)) {                            $user_present[] = $row['user_id'];                        }                    }                                        $results = $this->classtraineemodel->present_absent_attendance_list($tenant_id, $course_id, $class_id, $subsidy, $class_start, $class_end, $sort_by, $sort_order, $attendance_status, $user_present);                }            }            if ($export == 'xls') {                $this->load->helper('export_helper');                export_attendance($results, $class_details, $class_start, $class_end);            } else if ($export == 'pdf') {                $tenant_details = $this->classtraineemodel->get_tenant_masters($tenant_id);                $tenant_details->tenant_state = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_state), ', ');                $tenant_details->tenant_country = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_country), ', ');                $this->load->helper('pdf_reports_helper');                return generate_class_attendance_pdf($results, $class_details, $tenant_details);            }        } else {             $data = get_data_for_renderring_attendance($tenant_id, $course_id, $class_id, $subsidy, $from_date, $to_date, $week_start_date, $week, $sort_by, $sort_order,$attendance_status);            $class_details = $this->classModel->get_class_details_for_report($tenant_id, $data['course_id'], $data['class_id']);            $class_details->class_start_date_formatted = date_format_singapore($class_details->class_start_datetime) . " " . time_format_singapore($class_details->class_start_datetime);            $class_details->class_end_date_formatted = date_format_singapore($class_details->class_end_datetime) . " " . time_format_singapore($class_details->class_end_datetime);            $class_details->total_booked_seats = $this->classModel->get_class_booked($data['course_id'], $data['class_id'], $tenant_id);						// 13-4-16 skm code start             $data['class_schedule'] = $this->class->get_all_class_schedule($tenant_id, $class_id);             $data['user'] = $this->user;            // 13-4-16 skm code end			            $data['controllerurl'] = 'reports/attendance';            $data['page_title'] = 'General Reports - Attendance';            $data['main_content'] = 'classtrainee/markattendance';            $data['is_report_page'] = true;            $data['class_details'] = $class_details;            $this->load->view('layout', $data);        }    }    /**     * General Report - WDA     */    public function wda() {        $data['sideMenuData'] = fetch_non_main_page_content();        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $courses = $this->reportsModel->get_class_courses($tenant_id);        $data['courses'] = array('' => 'Select');        foreach ($courses as $key => $val) {            $data['courses'][$key] = $val;        }        $classes = array('0' => 'Please Select');        $courseId = $this->input->get('courseId');        if (!empty($courseId)) {            foreach ($this->courseModel->get_classes_active_enrollment_courses($courseId)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        $data['classes'] = $classes;        $data['meta_map'] = $this->meta->get_param_map();        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");        $taxcode = $this->input->get_post("taxcode_id");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $search_select = $this->input->get_post("search_select");        $sort_link = "courseId=" . $course_id . "&classId=" . $class_id . "&search_select=" . $search_select . "&trainee_id=" . $trainee . "&taxcode_id=" . $taxcode . "&start_date=" . $start_date . "&end_date=" . $end_date;        if ($trainee) {            $data['trainee_name'] = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        if ($taxcode) {            $data['trainee_name'] = $this->classtraineemodel->get_trainee_name(0, 0, $taxcode, $tenant_id);        }        $totalrows = $this->reportsModel->get_all_wda_count($tenant_id, $course_id, $class_id, $trainee, $taxcode, $start_date, $end_date);        $records_per_page = RECORDS_PER_PAGE;        $baseurl = base_url() . 'reports/wda/';        $pageno = ($this->uri->segment(3)) ? $this->uri->segment(3) : 1;        $offset = ($pageno * $records_per_page);        $field = ($this->input->get('f')) ? $this->input->get('f') : 'usr.tax_code';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_all_wda($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $taxcode, $start_date, $end_date);        $this->load->helper('pagination');        $data['pagination'] = get_pagination($records_per_page, $pageno, $baseurl, $totalrows, $field, $order_by . '&' . $sort_link);        $this->load->model('trainee_model', 'traineemodel');        foreach ($tabledata as $k => $v) {            $exam_date = $this->traineemodel->get_assessment_date($data->class_id, $data->user_id);            $company_name = $this->traineemodel->get_company_details($v->user_id)->row();                        $tabledata[$k]->exam_date = $exam_date;            $tabledata[$k]->check_date = empty($exam_date) ? $tabledata[$k]->class_end_datetime : $exam_date;            $tabledata[$k]->company_name = empty($company_name->company_name ) ? "Individual" : $company_name->company_name ;        }        usort($tabledata, function($a1, $a2) {            $value1 = strtotime($a2->check_date);            $value2 = strtotime($a1->check_date);            $rdiff = $value1 - $value2;            if ($rdiff)                return $rdiff;        });        $data['tabledata'] = $tabledata;        $data['page_title'] = 'Reports - WDA';        $data['main_content'] = 'reports/wda';        $this->load->view('layout', $data);    }    /*     * General Report - WDA - Export to XLS     */    public function wda_export_xls() {        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $meta_map = $this->meta->get_param_map();        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");        $taxcode = $this->input->get_post("taxcode_id");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $courses = $this->reportsModel->get_class_courses($tenant_id);        if (!empty($course_id)) {            $classes = array();            foreach ($this->courseModel->get_classes_active_enrollment_courses($course_id)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if ($trainee) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        if ($taxcode) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $taxcode, $tenant_id);        }        $field = ($this->input->get('f')) ? $this->input->get('f') : 'usr.tax_code';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_all_wda($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $taxcode, $start_date, $end_date);        $this->load->model('trainee_model', 'traineemodel');        foreach ($tabledata as $k => $v) {            $exam_date = $this->traineemodel->get_assessment_date($data->class_id, $data->user_id);            $company_name = $this->traineemodel->get_company_details($v->user_id)->row();              $tabledata[$k]->exam_date = $exam_date;            $tabledata[$k]->check_date = empty($exam_date) ? $tabledata[$k]->class_end_datetime : $exam_date;            $tabledata[$k]->company_name = empty($company_name->company_name ) ? "Individual" : $company_name->company_name ;        }        usort($tabledata, function($a1, $a2) {            $value1 = strtotime($a2->check_date);            $value2 = strtotime($a1->check_date);            $rdiff = $value1 - $value2;            if ($rdiff)                return $rdiff;        });        $this->load->helper('export_helper');        $count_tabledata = count($tabledata);        $excel_titles = array('NRIC/FIN No.', 'Trainee Name','Company Name' ,'Account Type', 'Home Address', 'Contact Details', 'Course Name', 'Class Start Date', 'Assessment Date', 'Amount Paid');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++) {            $paid = ($tabledata[$i]->payment_status == 'PAID') ? $tabledata[$i]->total_amount_due : 0;            $assmnt_date = empty($tabledata[$i]->exam_date) ? $tabledata[$i]->class_end_datetime : $tabledata[$i]->exam_date;            $excel_data[$i][] = $this->mask_format($tabledata[$i]->tax_code);            $excel_data[$i][] = $tabledata[$i]->first_name . ' ' . $tabledata[$i]->last_name;            $excel_data[$i][] = $tabledata[$i]->company_name;            $excel_data[$i][] = $meta_map[$tabledata[$i]->account_type];            $excel_data[$i][] = $tabledata[$i]->personal_address_bldg . ' ' . $tabledata[$i]->personal_address_city . ' ' . $meta_map[$tabledata[$i]->personal_address_state] . ' ' . $meta_map[$tabledata[$i]->personal_address_country];            $excel_data[$i][] = $tabledata[$i]->registered_email_id . ' ' . $tabledata[$i]->contact_number;            $excel_data[$i][] = $tabledata[$i]->crse_name;            $excel_data[$i][] = date('d/m/Y', strtotime($tabledata[$i]->class_start_datetime));            $excel_data[$i][] = date('d/m/Y', strtotime($assmnt_date));            $excel_data[$i][] = '$ ' . number_format($paid, 2, '.', '');        }        if (empty($start_date) && empty($end_date)) {            $period = ' for ' . date('F d Y, l');        } else {            $period = 'for the period';            if (!empty($start_date))                $period .= ' from ' . date('F d Y', DateTime::createFromFormat('d-m-Y', $start_date)->getTimestamp());            if (!empty($end_date))                $period .= ' to ' . date('F d Y', DateTime::createFromFormat('d-m-Y', $end_date)->getTimestamp());        }        if (!empty($course_id)) {            $period .= ' \'' . $courses[$course_id] . '\'';        }        if (!empty($class_id)) {            $period .= ' \'' . $classes[$class_id] . '\'';        }        if (!empty($trainee_name)) {            $period .= ' \'' . $trainee_name->first . ' ' . $trainee_name->last . ' ' . $trainee_name->tax_code . '\'';        }        $excel_filename = 'WDA_Report.xls';        $excel_sheetname = 'WDA Report';        $excel_main_heading = 'WDA Report ' . $period;        export_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }    /**     * General Report - WDA - Export to PDF     */    public function report_wda_pdf() {        ini_set('memory_limit', '512M');        $tenant_id = $this->tenant_id;        $meta_map = $this->meta->get_param_map();        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");        $taxcode = $this->input->get_post("taxcode_id");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        if (!empty($course_id)) {            foreach ($this->courseModel->get_classes_active_enrollment_courses($course_id)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if ($trainee) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        if ($taxcode) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $taxcode, $tenant_id);        }        $tabledata = $this->reportsModel->get_all_wda($tenant_id, 0, 0, 0, 0, $course_id, $class_id, $trainee, $taxcode, $start_date, $end_date);        $this->load->model('trainee_model', 'traineemodel');        foreach ($tabledata as $k => $v) {            $exam_date = $this->traineemodel->get_assessment_date($data->class_id, $data->user_id);            $company_name = $this->traineemodel->get_company_details($v->user_id)->row();              $tabledata[$k]->exam_date = $exam_date;            $tabledata[$k]->check_date = empty($exam_date) ? $tabledata[$k]->class_end_datetime : $exam_date;            $tabledata[$k]->company_name = empty($company_name->company_name ) ? "Individual" : $company_name->company_name;        }        usort($tabledata, function($a1, $a2) {            $value1 = strtotime($a2->check_date);            $value2 = strtotime($a1->check_date);            $rdiff = $value1 - $value2;            if ($rdiff)                return $rdiff;        });        $tenant_details = $this->classtraineemodel->get_tenant_masters($tenant_id);        $tenant_details->tenant_state = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_state), ', ');        $tenant_details->tenant_country = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_country), ', ');        $this->load->helper('pdf_reports_helper');        return wda_reports_pdf($tabledata, $meta_map, $tenant_details, $courses, $classes, $trainee_name);    }    /**     * General Repotrt - Certificates     */    public function certificates()     {        $data['sideMenuData'] = fetch_non_main_page_content();        $export_url = '?';        foreach ($_GET as $k => $v)         {            $export_url .="$k=$v&";        }        $export_url = rtrim($export_url, '&');        $data['export_url'] = $export_url;        $data['sort_link'] = $sort_link = "courseId=" .                 $this->input->get('courseId') . "&classId=" . $this->input->get('classId') . "&trainee=" . $this->input->get('trainee') .                "&start_date=" . $this->input->get('start_date') . "&end_date=" . $this->input->get('end_date');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        $data['courses'] = array('' => 'Select');        foreach ($courses as $key => $val) {            $data['courses'][$key] = $val;        }        $classes = array('0' => 'Please Select');        $courseId = $this->input->get('courseId');        $classId = $this->input->get('classId');        if (!empty($courseId)) {            foreach ($this->courseModel->get_classes_active_enrollment_certificate_courses($courseId)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if (!empty($classId)) {            $class_details = $this->classModel->get_class_details($this->tenant_id, $classId);            $data['start_date'] = date('d-m-Y', strtotime($class_details->class_start_datetime));            $data['end_date'] = date('d-m-Y', strtotime($class_details->class_end_datetime));        }        $data['classes'] = $classes;        $data['meta_map'] = $this->meta->get_param_map();        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");        $status = $this->input->get_post("status");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        if ($trainee) {            $data['trainee_name'] = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        $totalrows = $this->reportsModel->get_all_certificates_count($tenant_id, $course_id, $class_id, $trainee, $status, $start_date, $end_date);        $records_per_page = RECORDS_PER_PAGE;        $baseurl = base_url() . 'reports/certificates/';        $pageno = ($this->uri->segment(3)) ? $this->uri->segment(3) : 1;        $offset = ($pageno * $records_per_page);        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_all_certificates($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $status, $start_date, $end_date);        $this->load->helper('pagination');        $data['pagination'] = get_pagination($records_per_page, $pageno, $baseurl, $totalrows, $field, $order_by . '&' . $sort_link);        $data['tabledata'] = $tabledata;        $data['sort_order'] = $order_by;        $data['controllerurl'] = 'reports/certificates/';        $data['page_title'] = 'TMS Certificates';        $data['main_content'] = 'reports/certificates';        $this->load->view('layout', $data);    }    //    //certificate_distribution public function certificate_distribution()  {        //$this->output->enable_profiler(TRUE);        ini_set('memory_limit', '-1');        $data['sideMenuData'] = fetch_non_main_page_content();        $export_url = '?';        foreach ($_GET as $k => $v)         {            $export_url .="$k=$v&";        }        $export_url = rtrim($export_url, '&');        $data['export_url'] = $export_url;        $data['sort_link'] = $sort_link = "compId=".$this->input->get('compId')."&courseId=" .                 $this->input->get('courseId') . "&classId=" . $this->input->get('classId') . "&trainee=" . $this->input->get('trainee') . "&taxcode=" . $this->input->get('taxcode_id');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        $data['courses'] = array('' => 'Select');        foreach ($courses as $key => $val)         {            $data['courses'][$key] = $val;        }        $classes = array('0' => 'Please Select');        $courseId = $this->input->get('courseId');        $classId = $this->input->get('classId');        if (!empty($courseId))         {            foreach ($this->courseModel->get_classes_active_enrollment_certificate_courses($courseId)->result() as $class)             {                $classes[$class->class_id] = $class->class_name;            }        }        if (!empty($classId))         {            $class_details = $this->classModel->get_class_details($this->tenant_id, $classId);        }        $data['classes'] = $classes;        $data['meta_map'] = $this->meta->get_param_map();        $comp_id = $this->input->get_post("company_id");        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");                if ($trainee)         {             $trainee = $this->input->get_post("trainee_id");        }        else         {            $trainee = $this->input->get_post("taxcode_id");        }                        if ($trainee)         {                       $data['trainee_name'] = $this->reportsModel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        if ($taxcode)         {                        $data['trainee_name'] = $this->reportsModel->get_trainee_name(0, $taxcode, 0, $tenant_id);        }      //$totalrows = $this->reportsModel->get_all_certificates_count($tenant_id, $course_id, $class_id,$comp_id, $trainee, $status, $start_date, $end_date);        $totalrows = $this->reportsModel->get_all_certificates_dist_count($tenant_id, $course_id, $class_id,$comp_id, $trainee, $status, $start_date, $end_date);        $records_per_page = RECORDS_PER_PAGE;        $baseurl = base_url() . 'reports/certificate_distribution/';        $pageno = ($this->uri->segment(3)) ? $this->uri->segment(3) : 1;        $offset = ($pageno * $records_per_page);        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';                                        $tabledata = $this->reportsModel->get_certificates_dist($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id,$comp_id, $trainee);        $data['tabledata'] = $tabledata;                   foreach($data['tabledata'] as $k=>$tabledata)            {                $user_id=$tabledata['user_id'];                             $company_details = $this->reportsModel->get_company_details($user_id);                if($company_details->num_rows())                {                     $company_data = $company_details->row();                   //echo $company_data->com_name."(".$company_data->company_id.")";                                       if($company_data->com_name=="INDIVIDUAL")                    {                         $data['tabledata'][$k]['com_name_ind'] = $company_data->com_name;                         $data['tabledata'][$k]['comp_id_ind'] = $company_data->company_id;                         $data['tabledata'][$k]['comp_email_ind'] = $company_data->comp_email;                    }                   else                    {                         $data['tabledata'][$k]['com_name'] = $company_data->com_name;                         $data['tabledata'][$k]['comp_id'] = $company_data->company_id;                         $data['tabledata'][$k]['comp_email'] = $company_data->comp_email;                         if($company_data->com_name=="OTHERS")                         {                             $data['tabledata'][$k]['com_name_others'] =   $tabledata['cert_sent_to'];                         }                    }                    //echo "<br/>";                }            }                               $this->load->helper('pagination');        $data['pagination'] = get_pagination($records_per_page, $pageno, $baseurl, $totalrows, $field, $order_by . '&' . $sort_link);                $data['sort_order'] = $order_by;        $data['controllerurl'] = 'reports/certificate_distribution/';        $data['page_title'] = 'TMS Certificate Distribution';        $data['main_content'] = 'reports/certificate_distribution';        $this->load->view('layout', $data);    }     /**     * Trainee Summary Report     */    public function trainee_summary()     {        //$this->output->enable_profiler(TRUE);        $data['sideMenuData'] = fetch_non_main_page_content();        $export_url = '?';        foreach ($_GET as $k => $v)         {            $export_url .="$k=$v&";        }        $export_url = rtrim($export_url, '&');        $data['export_url'] = $export_url;        $data['sort_link'] = $sort_link = "courseId=" .                 $this->input->get('courseId') . "&classId=" . $this->input->get('classId') . "&trainee=" . $this->input->get('trainee') .                "&start_date=" . $this->input->get('start_date') . "&end_date=" . $this->input->get('end_date');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        $data['courses'] = array('' => 'Select');        foreach ($courses as $key => $val) {            $data['courses'][$key] = $val;        }        $classes = array('0' => 'Please Select');                $courseId = $this->input->get('courseId');        $classId = $this->input->get('classId');        if (!empty($courseId)) {            foreach ($this->courseModel->get_classes_active_enrollment_certificate_courses($courseId)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if (!empty($classId)) {            $class_details = $this->classModel->get_class_details($this->tenant_id, $classId);            $data['start_date'] = date('d-m-Y', strtotime($class_details->class_start_datetime));            $data['end_date'] = date('d-m-Y', strtotime($class_details->class_end_datetime));        }        $data['classes'] = $classes;        $data['meta_map'] = $this->meta->get_param_map();        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");                $invoice_id = $this->input->get_post("invoice_id");        $status = $this->input->get_post("status");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");    if(!empty($_GET)){        if ($trainee) {            $data['trainee_name'] = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        $totalrows = $this->reportsModel->get_all_trainee_summary_count($tenant_id, $course_id, $class_id, $trainee, $status, $start_date, $end_date, $invoice_id);        $records_per_page = RECORDS_PER_PAGE;        $baseurl = base_url() . 'reports/trainee_summary/';        $pageno = ($this->uri->segment(3)) ? $this->uri->segment(3) : 1;        $offset = ($pageno * $records_per_page);        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_all_trainee_summary($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $status, $start_date, $end_date, $invoice_id);        $this->load->helper('pagination');        $data['pagination'] = get_pagination($records_per_page, $pageno, $baseurl, $totalrows, $field, $order_by . '&' . $sort_link);        $data['tabledata'] = $tabledata;        $data['sort_order'] = $order_by;        }        $data['controllerurl'] = 'reports/trainee_summary/';        $data['page_title'] = 'TMS Trainee Summary';        $data['main_content'] = 'reports/trainee_summary';        $this->load->view('layout', $data);    }     /*  * ends trainee summary report  */     /**     * Trainee GST Report     */     public function gst_report() {        // $this->benchmark->mark('code_start');        $data['sideMenuData'] = fetch_non_main_page_content();        //$this->output->enable_profiler(TRUE);        $export_url = '?';        foreach ($_GET as $k => $v) {            $export_url .="$k=$v&";        }        $export_url = rtrim($export_url, '&');        $data['export_url'] = $export_url;        $data['sort_link'] = $sort_link = "courseId=" . $this->input->get('courseId') . "&classId=" . $this->input->get('classId') . "&trainee=" . $this->input->get('trainee') .                "&start_date=" . $this->input->get('start_date') . "&end_date=" . $this->input->get('end_date');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        $data['courses'] = array('' => 'Select');        foreach ($courses as $key => $val) {            $data['courses'][$key] = $val;        }        if (!empty($_GET)) {   ///added by shubhranshu to prevent load of default list////////            $classes = array('0' => 'Please Select');            $courseId = $this->input->get('courseId');            $classId = $this->input->get('classId');            if (!empty($courseId)) {                foreach ($this->courseModel->get_classes_active_enrollment_certificate_courses($courseId)->result() as $class) {                    $classes[$class->class_id] = $class->class_name;                }            }            if (!empty($classId)) {                $class_details = $this->classModel->get_class_details($this->tenant_id, $classId);                $data['start_date'] = date('d-m-Y', strtotime($class_details->class_start_datetime));                $data['end_date'] = date('d-m-Y', strtotime($class_details->class_end_datetime));            }            $data['classes'] = $classes;            $data['meta_map'] = $this->meta->get_param_map();            $course_id = $this->input->get_post("courseId");            $class_id = $this->input->get_post("classId");            $trainee = $this->input->get_post("trainee_id");            $status = $this->input->get_post("status");            $start_date = $this->input->get_post("start_date");            $end_date = $this->input->get_post("end_date");            if ($trainee) {                $data['trainee_name'] = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);            }            $totalrows = $this->reportsModel->get_gst_report_count($tenant_id, $course_id, $class_id, $trainee, $status, $start_date, $end_date);            $records_per_page = RECORDS_PER_PAGE;            $baseurl = base_url() . 'reports/gst_report/';            $pageno = ($this->uri->segment(3)) ? $this->uri->segment(3) : 1;            $offset = ($pageno * $records_per_page);            $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';            $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';            $tabledata = $this->reportsModel->get_gst_report($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $status, $start_date, $end_date);//        echo $this->db->last_query();            $this->load->helper('pagination');            $data['pagination'] = get_pagination($records_per_page, $pageno, $baseurl, $totalrows, $field, $order_by . '&' . $sort_link);            $data['tabledata'] = $tabledata;            $data['sort_order'] = $order_by;        }///added by shubhranshu to prevent load of default list////////        $data['controllerurl'] = 'reports/gst_report/';        $data['page_title'] = 'TMS GST Report';        $data['main_content'] = 'reports/gst_report';        // Some code happens here        //$this->benchmark->mark('code_end');        //echo $this->benchmark->elapsed_time('code_start', 'code_end');        $this->load->view('layout', $data);    }//end      /*     * General Report - GST Report - Export to XLS     */    public function gst_report_export_xls()     {        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        /*skm code start */        if($tenant_id == 'T02' || $tenant_id == 'T12' || $tenant_id == 'T01')        {            $subsidy_amount = 'Skills Future Funding Subsidy Amount';        }else{             $subsidy_amount = 'Subsidy Amount';        }        /*skm code end */        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");        $status = $this->input->get_post("status");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        if (!empty($course_id))         {            $classes = array();            foreach ($this->courseModel->get_classes_active_enrollment_courses($course_id)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if ($trainee) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_gst_report($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $status, $start_date, $end_date);        $this->load->helper('export_helper');        $count_tabledata = count($tabledata);        $excel_titles = array('NRIC/FIN No.', 'Trainee Name','Company','Course Name', 'Class Name','Class Start Date','Class End Date','Total Amount Due', 'Total No.of Trainee', 'GST Amount',$subsidy_amount,'Discount Rate','Total Inv. Amount','Payment Status','Invoice Number');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++)         {            $certi_coll_date = (empty($tabledata[$i]->certi_coll_date)) ? '' : date('d/m/Y', strtotime($tabledata[$i]->certi_coll_date));            $certified_date = (empty($tabledata[$i]->certificate_coll_on)) ? '' : date('d/m/Y', strtotime($tabledata[$i]->certificate_coll_on));              $validity_date = '';                    $status = '';                    if ($tabledata[$i]->crse_cert_validity > 0)                     {                        $date = strtotime("+" . $tabledata[$i]->crse_cert_validity . " days", strtotime($tabledata[$i]->class_end_datetime));                        $validity_datecheck = date('d-m-Y', $date);                        $validity_date = ' (' . date('d/m/Y', $date) . ')';                        $cur_date = date('d-m-Y');                        if (strtotime($cur_date) > strtotime($validity_datecheck))                         {                            $status = 'Expired/ Due for Renewal';                        }else if (strtotime($cur_date) <= strtotime($validity_datecheck)) {                            $status = 'ACTIVE';                        }                    }                     else                     {                        $status = 'Life Long';                    }            $excel_data[$i][] = $this->mask_format($tabledata[$i]->tax_code);            $excel_data[$i][] = $tabledata[$i]->first_name . ' ' . $tabledata[$i]->last_name;            $excel_data[$i][]=  $tabledata[$i]->company_name;            $excel_data[$i][] = $tabledata[$i]->crse_name;            $excel_data[$i][] = $tabledata[$i]->class_name;            $excel_data[$i][] = $tabledata[$i]->class_start_datetime;            $excel_data[$i][] = $tabledata[$i]->class_end_datetime;            $excel_data[$i][] = $tabledata[$i]->total_amount_due;            $excel_data[$i][] = $tabledata[$i]->total_inv_people;            $excel_data[$i][] = $tabledata[$i]->gst_amount;            $excel_data[$i][] = $tabledata[$i]->subsidy_amount;            $excel_data[$i][] = $tabledata[$i]->discount_rate;            $excel_data[$i][] = $tabledata[$i]->total_inv_amount;            $excel_data[$i][] = $tabledata[$i]->payment_status;            $excel_data[$i][] = $tabledata[$i]->invoice_id;                   }                if (empty($start_date) && empty($end_date))         {            $period = ' for ' . date('F d Y, l');        }         else         {            $period = 'for the period';            if (!empty($start_date))                $period .= ' from ' . date('F d Y', DateTime::createFromFormat('d-m-Y', $start_date)->getTimestamp());            if (!empty($end_date))                $period .= ' to ' . date('F d Y', DateTime::createFromFormat('d-m-Y', $end_date)->getTimestamp());        }        if (!empty($course_id)) {            $period .= ' \'' . $courses[$course_id] . '\'';        }        if (!empty($class_id)) {            $period .= ' \'' . $classes[$class_id] . '\'';        }        if (!empty($trainee_name)) {            $period .= ' \'' . $trainee_name->first . ' ' . $trainee_name->last . ' ' . $trainee_name->tax_code . '\'';        }        if (!empty($status)) {            if ($status == 'PENDCOLL') {                $period .= ' \' Pending Collection \'';            } elseif ($status == 'EXPIRD') {                $period .= ' \' Expired / Due for Renewal \'';            }        }        $excel_filename = 'GST Report.xls';        $excel_sheetname = 'GST Report';        $excel_main_heading = 'Report - GST Report' . $period;        export_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }    /**     * function to check soa data available JSON     */    public function soa_report_json() {        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        if ($this->input->server('REQUEST_METHOD') === 'POST') {            $tabledata = $this->reportsModel->get_soa_data($tenant_id, $course_id, $class_id, $start_date, $end_date);              if (empty($tabledata)) {                echo 0;            } else {                echo 1;            }            exit();        }    } /**     * function to check traqom data available JSON     */    public function traqom_report_json() {        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $start_date1 = $this->input->get_post("start_date1");        $start_date2 = $this->input->get_post("start_date2");        $end_date = $this->input->get_post("end_date");        if ($this->input->server('REQUEST_METHOD') === 'POST') {            $tabledata = $this->reportsModel->get_traqom_data($tenant_id, $course_id, $class_id, $start_date1, $start_date2);                        if (empty($tabledata)) {                echo 0;            } else {                echo 1;            }            exit();        }    }    /**     * General Repotrt - Certificates     */    public function soa_report() {        $data['sideMenuData'] = fetch_non_main_page_content();        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        $data['courses'] = array('' => 'Select');        foreach ($courses as $key => $val) {            $data['courses'][$key] = $val;        }        $classes = array('0' => 'Please Select');        $courseId = $this->input->get_post('courseId');        $classId = $this->input->get_post('classId');        if (!empty($courseId)) {            foreach ($this->courseModel->get_completed_classes_active_enrollment_for_courses($courseId)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        $data['classes'] = $classes;        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $select_soa_print = $this->input->get_post("select_soa_print");        if ($this->input->server('REQUEST_METHOD') === 'POST') {            $tabledata = $this->reportsModel->get_soa_data($tenant_id, $course_id, $class_id, $start_date, $end_date);            $this->load->helper('export_helper');            if (empty($tabledata)) {                $this->session->set_flashdata("error", "There is no data available in this search criteria. Try again.");                return redirect('reports/soa_report');            }            $metadata = $this->meta->get_param_map();            if ($select_soa_print == 2) {                if(TENANT_ID=='T02' || TENANT_ID=='T24'){                    generate_soa_report_csv_xp($tabledata, $metadata);                }else{                    generate_soa_report_csv($tabledata, $metadata);                }                                            } else {                if(TENANT_ID=='T02' || TENANT_ID=='T24'){                    generate_soa_report_xls_xp($tabledata, $metadata);                }else{                    generate_soa_report_xls($tabledata, $metadata);                }                                redirect('reports/soa_report');            }        }        $data['page_title'] = 'SOA Reports';        $data['main_content'] = 'reports/soa';        $this->load->view('layout', $data);    }            /**         * Traqom Repotrt -     */    public function traqom_report()     {	$generate_by = $this->input->get_post("generateby");        //$this->output->enable_profiler(TRUE);        $data['sideMenuData'] = fetch_non_main_page_content();        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        $data['courses'] = array('' => 'Select');        foreach ($courses as $key => $val)         {            $data['courses'][$key] = $val;        }        $classes = array('0' => 'Please Select');        $courseId = $this->input->get_post('courseId');        $classId = $this->input->get_post('classId');        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");                $start_date1 = $this->input->get_post("start_date1");        $start_date2 = $this->input->get_post("start_date2");               $end_date = $this->input->get_post("end_date");        $select_soa_print = $this->input->get_post("select_soa_print");        if (!empty($courseId))         {            foreach ($this->courseModel->get_completed_classes_active_enrollment_for_courses($courseId)->result() as $class)             {                $classes[$class->class_id] = $class->class_name;            }        }        $data['classes'] = $classes;        if ($this->input->server('REQUEST_METHOD') === 'POST')         {            $tabledata = $this->reportsModel->get_traqom_data($tenant_id, $course_id, $class_id, $start_date1, $start_date2);                        $this->load->helper('export_helper');            if (empty($tabledata))             {                $this->session->set_flashdata("error", "There is no data available in this search criteria. Try again.");                return redirect('reports/traqom_report');            }            $metadata = $this->meta->get_param_map();            if ($select_soa_print == 2)             {                //return generate_traqom_report_csv($tabledata, $metadata);		if($generate_by == '2') {                    if(TENANT_ID == 'T02'){			return generate_traqom2_report_csv_xp($tabledata, $metadata);                    }else{                        return generate_traqom2_report_csv($tabledata, $metadata);                    }		} else {                    if(TENANT_ID == 'T02'){                        return generate_traqom_report_csv_xp($tabledata, $metadata);                    }else{                        return generate_traqom_report_csv($tabledata, $metadata);                    }					}              }             else             {                //generate_traqom_report_xls($tabledata, $metadata);		if($generate_by == '2') {                    if($tenant_id == 'T20' || $tenant_id == 'T17'){///added by shubhranshu for wablab                        generate_traqom_report_xls_wablab($tabledata, $metadata);                    }else if($tenant_id == 'T02'){                        generate_traqom2_report_xls_xp($tabledata, $metadata);                    }else{                        generate_traqom2_report_xls($tabledata, $metadata);                    }			} else {                    if($tenant_id == 'T20' || $tenant_id == 'T17'){                        generate_traqom_report_xls_wablab($tabledata, $metadata);                    }else if($tenant_id == 'T02'){                        generate_traqom_report_xls_xp($tabledata, $metadata);                    }else{                        generate_traqom_report_xls($tabledata, $metadata);                    }			}            }        }        $data['page_title'] = 'TRAQOM Reports';        $data['main_content'] = 'reports/traqom';        $this->load->view('layout', $data);    }    /*     * General Report - Certificates - Export to XLS     */    public function certificates_export_xls()     {        //ini_set('memory_limit','256M'); //added by shubhranshu since memory exhausted        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");        $status = $this->input->get_post("status");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        if (!empty($course_id))         {            $classes = array();            foreach ($this->courseModel->get_classes_active_enrollment_courses($course_id)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if ($trainee) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_all_certificates($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $status, $start_date, $end_date);        $this->load->helper('export_helper');        $count_tabledata = count($tabledata);        $excel_titles = array('Course Name', 'Class Name', 'NRIC/FIN No.', 'Trainee Name', 'Course Comp. Dt.', 'Coll. Dt.', 'Collected On','Status (Expiry)','Pymnt. Status');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++) {            $certi_coll_date = (empty($tabledata[$i]->certi_coll_date)) ? '' : date('d/m/Y', strtotime($tabledata[$i]->certi_coll_date));            $certified_date = (empty($tabledata[$i]->certificate_coll_on)) ? '' : date('d/m/Y', strtotime($tabledata[$i]->certificate_coll_on));              $validity_date = '';                    $status = '';                    if ($tabledata[$i]->crse_cert_validity > 0) {                        $date = strtotime("+" . $tabledata[$i]->crse_cert_validity . " days", strtotime($tabledata[$i]->class_end_datetime));                        $validity_datecheck = date('d-m-Y', $date);                        $validity_date = ' (' . date('d/m/Y', $date) . ')';                        $cur_date = date('d-m-Y');                        if (strtotime($cur_date) > strtotime($validity_datecheck)) {                            $status = 'Expired/ Due for Renewal';                        }else if (strtotime($cur_date) <= strtotime($validity_datecheck)) {                            $status = 'ACTIVE';                        }                    } else {                        $status = 'Life Long';                    }            $excel_data[$i][] = $tabledata[$i]->crse_name;            $excel_data[$i][] = $tabledata[$i]->class_name;            $excel_data[$i][] = $this->mask_format($tabledata[$i]->tax_code);            $excel_data[$i][] = $tabledata[$i]->first_name . ' ' . $tabledata[$i]->last_name;            $excel_data[$i][] = date('d/m/Y', strtotime($tabledata[$i]->class_end_datetime));            $excel_data[$i][] = $certi_coll_date;            $excel_data[$i][] = $certified_date;            $excel_data[$i][] = $status . $validity_date;            $excel_data[$i][] = $tabledata[$i]->payment_status;        }        if (empty($start_date) && empty($end_date)) {            $period = ' for ' . date('F d Y, l');        } else {            $period = 'for the period';            if (!empty($start_date))                $period .= ' from ' . date('F d Y', DateTime::createFromFormat('d-m-Y', $start_date)->getTimestamp());            if (!empty($end_date))                $period .= ' to ' . date('F d Y', DateTime::createFromFormat('d-m-Y', $end_date)->getTimestamp());        }        if (!empty($course_id)) {            $period .= ' \'' . $courses[$course_id] . '\'';        }        if (!empty($class_id)) {            $period .= ' \'' . $classes[$class_id] . '\'';        }        if (!empty($trainee_name)) {            $period .= ' \'' . $trainee_name->first . ' ' . $trainee_name->last . ' ' . $trainee_name->tax_code . '\'';        }        if (!empty($status)) {            if ($status == 'PENDCOLL') {                $period .= ' \' Pending Collection \'';            } elseif ($status == 'EXPIRD') {                $period .= ' \' Expired / Due for Renewal \'';            }        }        $excel_filename = 'certificates.xls';        $excel_sheetname = 'Certificates';        $excel_main_heading = 'General Report - Certificates' . $period;        export_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }    /*shubhranshu  start: replace nric first 5 character with mas*/    function mask_format($nric) {          if(is_numeric($nric) == 1){            return $nric;        }else{            $new_nric = substr_replace($nric,'XXXXX',0,5);               //$new_nric = substr_replace($nric,'XXXX',5);                    return $new_nric;        }       }    /* shubhranshu end */        public function certificates_dist_export_xls()     {        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");         $comp_id = $this->input->get_post("company_id");                if($this->input->get_post("trainee_id"))        {            $trainee = $this->input->get_post("trainee_id");        }        else        {             $trainee = $this->input->get_post("taxcode_id");        }        $status = $this->input->get_post("status");        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        if (!empty($course_id))         {            $classes = array();            foreach ($this->courseModel->get_classes_active_enrollment_courses($course_id)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if ($trainee)         {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_certificates_dist($tenant_id, $limit, $offset, $sort_by, $order_by, $course_id, $class_id,$comp_id, $trainee) ;        $data['tabledata']=$tabledata;        //get company deatils         foreach($data['tabledata'] as $k=>$tabledata)        {                $user_id=$tabledata['user_id'];             //   echo "[".$tabledata['user_id']."]";                $company_details = $this->reportsModel->get_company_details($user_id);                if($company_details->num_rows())                {                     $company_data = $company_details->row();                     if($company_data->com_name=="INDIVIDUAL")                    {                         $data['tabledata'][$k]['com_name_ind'] = $company_data->com_name;                         $data['tabledata'][$k]['comp_id_ind'] = $company_data->company_id;                         $data['tabledata'][$k]['comp_email_ind'] = $company_data->comp_email;                                           }                    else                    {                        $data['tabledata'][$k]['com_name'] = $company_data->com_name;                        $data['tabledata'][$k]['comp_id'] = $company_data->company_id;                        $data['tabledata'][$k]['comp_email'] = $company_data->comp_email;                        if($company_data->com_name=="OTHERS")                        {                             $data['tabledata'][$k]['com_name_others'] = $tabledata['cert_sent_to'];                        }                    }	                }        }                //        $this->load->helper('export_helper');        $count_tabledata = count($data['tabledata']);        $excel_titles = array('Course Name', 'Class Name', 'NRIC/FIN No.', 'Trainee Name','Company Name','Company Mail','Certificate Sent To','Collected On');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++)         {            $certified_date = (empty($data['tabledata'][$i]['certificate_coll_on'])) ? '' : date('d-m-Y', strtotime($data['tabledata'][$i]['certificate_coll_on']));            $excel_data[$i][] = $data['tabledata'][$i]['crse_name'];            $excel_data[$i][] = $data['tabledata'][$i]['class_name'];            $excel_data[$i][] = $this->mask_format($data['tabledata'][$i]['tax_code']);            $excel_data[$i][] = $data['tabledata'][$i]['first_name'] . ' ' . $tabledata[$i]['last_name'];            if($data['tabledata'][$i]['com_name_ind'])            {                $excel_data[$i][] = $data['tabledata'][$i]['com_name_ind'];            }            else             {               $excel_data[$i][] = $data['tabledata'][$i]['com_name'];            }                        $excel_data[$i][] = $data['tabledata'][$i]['comp_email'];            if(!$data['tabledata'][$i]['com_name'])            {                $excel_data[$i][] = $data['tabledata'][$i]['company_name'];            }            else if($data['tabledata'][$i]['com_name_others'])            {                $excel_data[$i][]=$data['tabledata'][$i]['com_name_others'];            }            else            {                $excel_data[$i][]="";            }                        $excel_data[$i][] = $certified_date;                    }        if (!empty($course_id)) {            $period .= ' \'' . $courses[$course_id] . '\'';        }        if (!empty($class_id)) {            $period .= ' \'' . $classes[$class_id] . '\'';        }        if (!empty($trainee_name))         {            $period .= ' \'' . $trainee_name->first . ' ' . $trainee_name->last . ' ' . $trainee_name->tax_code . '\'';        }        $excel_filename = 'certificates_distrubution.xls';        $excel_sheetname = 'certificates_distrubution';        $excel_main_heading = 'General Report - certificates_distrubution' . $period;        export_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    } //end      /*     * General Report - Certificates - Export to XLS     */    public function trainee_summary_export_xls()     {        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");                $invoice_id = $this->input->get_post("invoice_id"); // skm1        $status = $this->input->get_post("status");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        if (!empty($course_id))         {            $classes = array();            foreach ($this->courseModel->get_classes_active_enrollment_courses($course_id)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if ($trainee) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_all_trainee_summary($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $status, $start_date, $end_date, $invoice_id);        $this->load->helper('export_helper');        $count_tabledata = count($tabledata);        $excel_titles = array('NRIC/FIN No.', 'Trainee Name','Company','Course Name', 'Class Name',  'Result', 'Payment Status', 'Invoice No.','TG Number','Cert sent out date');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++)         {            $certi_coll_date = (empty($tabledata[$i]->certi_coll_date)) ? '' : date('d/m/Y', strtotime($tabledata[$i]->certi_coll_date));            $certified_date = (empty($tabledata[$i]->certificate_coll_on)) ? '' : date('d/m/Y', strtotime($tabledata[$i]->certificate_coll_on));              $validity_date = '';                    $status = '';                    if ($tabledata[$i]->crse_cert_validity > 0)                     {                        $date = strtotime("+" . $tabledata[$i]->crse_cert_validity . " days", strtotime($tabledata[$i]->class_end_datetime));                        $validity_datecheck = date('d-m-Y', $date);                        $validity_date = ' (' . date('d/m/Y', $date) . ')';                        $cur_date = date('d-m-Y');                        if (strtotime($cur_date) > strtotime($validity_datecheck))                         {                            $status = 'Expired/ Due for Renewal';                        }else if (strtotime($cur_date) <= strtotime($validity_datecheck)) {                            $status = 'ACTIVE';                        }                    }                     else                     {                        $status = 'Life Long';                    }                    if($tabledata[$i]->att_status==1){                        $att="Present";                    }else{                        $att="Absent";                    }            $excel_data[$i][] = $this->mask_format($tabledata[$i]->tax_code);            $excel_data[$i][] = $tabledata[$i]->first_name . ' ' . $tabledata[$i]->last_name;            $excel_data[$i][]=  $tabledata[$i]->company_name;            $excel_data[$i][] = $tabledata[$i]->crse_name;            $excel_data[$i][] = $tabledata[$i]->class_name;                       $excel_data[$i][] = $tabledata[$i]->feedback_answer.'('.$att.')';            $excel_data[$i][] = $tabledata[$i]->payment_status;            $excel_data[$i][] = $tabledata[$i]->invoice_id;            $excel_data[$i][] = $tabledata[$i]->tg_number;            $excel_data[$i][] = $certified_date;        }                if (empty($start_date) && empty($end_date))         {            $period = ' for ' . date('F d Y, l');        }         else         {            $period = 'for the period';            if (!empty($start_date))                $period .= ' from ' . date('F d Y', DateTime::createFromFormat('d-m-Y', $start_date)->getTimestamp());            if (!empty($end_date))                $period .= ' to ' . date('F d Y', DateTime::createFromFormat('d-m-Y', $end_date)->getTimestamp());        }        if (!empty($course_id)) {            $period .= ' \'' . $courses[$course_id] . '\'';        }        if (!empty($class_id)) {            $period .= ' \'' . $classes[$class_id] . '\'';        }        if (!empty($trainee_name)) {            $period .= ' \'' . $trainee_name->first . ' ' . $trainee_name->last . ' ' . $trainee_name->tax_code . '\'';        }        if (!empty($status)) {            if ($status == 'PENDCOLL') {                $period .= ' \' Pending Collection \'';            } elseif ($status == 'EXPIRD') {                $period .= ' \' Expired / Due for Renewal \'';            }        }        $excel_filename = 'trainee_summary.xls';        $excel_sheetname = 'Trianee Summary';        $excel_main_heading = 'Report - Trainee Summary' . $period;        export_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }    //end      /**     * Report - Regenerated & Deleted Invoice - Export to xls     */    public function regenrated_deleted_export_xls()     {        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $company_id = $this->input->get_post("company_id");                $invoice_id = $this->input->get_post("invoice_id"); // skm1                $prev_invoice_id = $this->input->get_post("prev_invoice_id"); // skm1        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        //$tabledata = $this->reportsModel->get_all_trainee_summary($tenant_id, $records_per_page, $offset, $field, $order_by, $course_id, $class_id, $trainee, $status, $start_date, $end_date, $invoice_id);        $tabledata = $this->reportsModel->get_reg_invoice($tenant_id, $limit, $offset, $field, $order_by, $payment_status, $start_date, $end_date, $company_id, $invoice_id, $prev_invoice_id);        $this->load->helper('export_helper');        $count_tabledata = count($tabledata);        $excel_titles = array('Previous Inv.', 'Current Inv','Inv DT','Regenerated On','Regenerated / Deleted By', 'Due To',  'Name', 'Status');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++)         {            $certi_coll_date = (empty($tabledata[$i]->certi_coll_date)) ? '' : date('d/m/Y', strtotime($tabledata[$i]->certi_coll_date));            $certified_date = (empty($tabledata[$i]->certificate_coll_on)) ? '' : date('d/m/Y', strtotime($tabledata[$i]->certificate_coll_on));              $validity_date = '';                    $status = '';                    if ($tabledata[$i]->crse_cert_validity > 0)                     {                        $date = strtotime("+" . $tabledata[$i]->crse_cert_validity . " days", strtotime($tabledata[$i]->class_end_datetime));                        $validity_datecheck = date('d-m-Y', $date);                        $validity_date = ' (' . date('d/m/Y', $date) . ')';                        $cur_date = date('d-m-Y');                        if (strtotime($cur_date) > strtotime($validity_datecheck))                         {                            $status = 'Expired/ Due for Renewal';                        }else if (strtotime($cur_date) <= strtotime($validity_datecheck)) {                            $status = 'ACTIVE';                        }                    }                     else                     {                        $status = 'Life Long';                    }                    if($tabledata[$i]->company_name!=""){                        $name = $tabledata[$i]->company_name;                    }                    else{                        $name = $tabledata[$i]->inv_type;                    }                                                                                     if($tabledata[$i]->regen_inv_id=="0"){                            $status="Deleted";                    }else{                            $status="Regenerated";                    }            $excel_data[$i][] = $tabledata[$i]->invoice_id;            $excel_data[$i][] = $tabledata[$i]->regen_inv_id;            $excel_data[$i][]=  $tabledata[$i]->inv_date;            $excel_data[$i][]=  $tabledata[$i]->date_on;            $excel_data[$i][] = $tabledata[$i]->user_name;            $excel_data[$i][] = $tabledata[$i]->reg_due_to;            $excel_data[$i][] = $name;            $excel_data[$i][] = $status;                    }                $excel_filename = 'regen_del_invoice.xls';        $excel_sheetname = 'Regenrated Summary';        $excel_main_heading = 'Report - Regenerated & Deleted Invoice';        export_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }    // skm end            /**     * General Report - Certificates - Export to PDF     */    public function report_certificates_pdf()     {        //ini_set('memory_limit','256M'); //added by shubhranshu since memory exhausted        $tenant_id = $this->tenant_id;        $meta_map = $this->meta->get_param_map();        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $trainee = $this->input->get_post("trainee_id");        $status = $this->input->get_post("status");        $start_date = $this->input->get_post("start_date");        $end_date = $this->input->get_post("end_date");        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        if (!empty($course_id)) {            foreach ($this->courseModel->get_classes_active_enrollment_courses($course_id)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if ($trainee) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_all_certificates($tenant_id, 0, 0, $field, $order_by, $course_id, $class_id, $trainee, $status, $start_date, $end_date);        $tenant_details = $this->classtraineemodel->get_tenant_masters($tenant_id);        $tenant_details->tenant_state = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_state), ', ');        $tenant_details->tenant_country = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_country), ', ');        $this->load->helper('pdf_reports_helper');        return certificates_reports_pdf($tabledata, $meta_map, $tenant_details, $courses, $classes, $trainee_name);    }        //added by pritam              public function report_certificates_distribution_pdf()     {        $tenant_id = $this->tenant_id;        $meta_map = $this->meta->get_param_map();        $course_id = $this->input->get_post("courseId");        $class_id = $this->input->get_post("classId");        $comp_id = $this->input->get_post("company_id");        if($this->input->get_post("trainee_id"))        {            $trainee = $this->input->get_post("trainee_id");        }        else         {            $trainee = $this->input->get_post("taxcode_id");        }        $status = $this->input->get_post("status");//        $start_date = $this->input->get_post("start_date");////        $end_date = $this->input->get_post("end_date");        $courses = $this->courseModel->get_course_list_by_tenant($tenant_id);        if (!empty($course_id)) {            foreach ($this->courseModel->get_classes_active_enrollment_courses($course_id)->result() as $class) {                $classes[$class->class_id] = $class->class_name;            }        }        if ($trainee) {            $trainee_name = $this->classtraineemodel->get_trainee_name(0, 0, $trainee, $tenant_id);        }        $field = ($this->input->get('f')) ? $this->input->get('f') : 'enrol.course_id';        $order_by = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $tabledata = $this->reportsModel->get_certificates_dist($tenant_id,0, 0, $field, $order_by, $course_id, $class_id,$comp_id, $trainee);         $data['tabledata'] = $tabledata;         //get company deatils          foreach($data['tabledata'] as $k=>$tabledata)            {                $user_id=$tabledata['user_id'];             //   echo "[".$tabledata['user_id']."]";                $company_details = $this->reportsModel->get_company_details($user_id);                if($company_details->num_rows())                {                     $company_data = $company_details->row();                                                             if($company_data->com_name=="INDIVIDUAL")                    {                         $data['tabledata'][$k]['com_name_ind'] = $company_data->com_name;                         $data['tabledata'][$k]['comp_id_ind'] = $company_data->company_id;                         $data['tabledata'][$k]['comp_email_ind'] = $company_data->comp_email;                    }                    else                    {                        $data['tabledata'][$k]['com_name'] = $company_data->com_name;                         $data['tabledata'][$k]['comp_id'] = $company_data->company_id;                         $data['tabledata'][$k]['comp_email'] = $company_data->comp_email;                         if($company_data->com_name=="OTHERS")                         {                             $data['tabledata'][$k]['com_name_others'] = $tabledata['cert_sent_to'];                         }                    }	                }            }                  //end        $tenant_details = $this->classtraineemodel->get_tenant_masters($tenant_id);        $tenant_details->tenant_state = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_state), ', ');        $tenant_details->tenant_country = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_country), ', ');        $this->load->helper('pdf_reports_helper');        return certificates_distribution_reports_pdf($data['tabledata'], $meta_map, $tenant_details, $courses, $classes, $trainee_name);    }        //end     /**     * General Reports - Sales Enrolment     */    public function enrolment_report()     {        $data['sideMenuData'] = fetch_non_main_page_content();        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $sales_id = $this->input->get('sales_id');          $non_sales_id = $this->input->get('non_sales_id');         if(!empty($sales_id)){            $sales_id=$sales_id;        }else if(!empty($non_sales_id)){            $sales_id=$non_sales_id;        }        $abs_pr = $this->input->get('abs_pr');           if ($this->user->role_id == 'SLEXEC')         {            $sales_id = $this->user->user_id;            $data['salesexec_check'] = 1;        }        $date_from = $this->input->get('from_date');        $date_to = $this->input->get('to_date');        $sort_by = ($this->input->get('f')) ? $this->input->get('f') : 'ce.enrolled_on';        $sort_order = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $baseurl = base_url() . 'reports/enrolment_report/';        $records_per_page = RECORDS_PER_PAGE;        $pageno = $this->uri->segment(3);        if (empty($pageno)) {            $pageno = 1;        }        $offset = ($pageno * $records_per_page);        $start_date = $end_date = null;        if (!empty($date_from)) {            $start_date = date_format_mysql($date_from);        }        if (!empty($date_to)) {            $end_date = date_format_mysql($date_to);        }        $salesexe = $this->courseModel->get_tenant_users_by_role($tenant_id, 'SLEXEC');        $non_salesexe = $this->courseModel->get_tenant_non_sales_exe($tenant_id, 'SLEXEC');        $sales = array();                if ($this->user->role_id != 'SLEXEC') {            $sales[''] = 'Select';        }        foreach ($salesexe as $k => $row) {            $sales[$k] = $row;        }        $data['sales'] = $sales;                $non_sales =array();        if ($this->user->role_id != 'SLEXEC') {            $non_sales[''] = 'Select';        }        foreach ($non_salesexe as $k => $row) {            $non_sales[$k] = $row;        }        $data['non_sales'] = $non_sales;        ///modified by shubhranshu        $this->db->cache_on();        list($displayResultSet) = $this->reportsModel->get_enrolments_for_sales($tenant_id, $sales_id,$abs_pr,$start_date, $end_date, $sort_by, $sort_order, $offset, $records_per_page);        $totalRecordCount = $this->reportsModel->get_enrolments_for_sales_count($tenant_id, $sales_id,$abs_pr, $start_date, $end_date, $sort_by);        ///modified by shubhranshu        $displayResultSet = date_format_singapore_for_array($displayResultSet, 'enrolment_date');        $data['tabledata'] = $displayResultSet;                $this->load->helper('pagination');        $sort_link = $_SERVER['QUERY_STRING'];        $data['pagination'] = get_pagination($records_per_page, $pageno, $baseurl, $totalRecordCount, $sort_by, $sort_order . '&' . $sort_link);        $data['page_title'] = 'Reports - Enrollment Report (Sales)';        $data['main_content'] = 'reports/enrolment_report';        $data['sort_order'] = $sort_order;                $data['controllerurl'] = 'reports/enrolment_report/';        $data['sort_by'] = $sort_by;        $data['controllerurl'] = 'reports/enrolment_report';        $data['meta_map'] = $this->meta->get_param_map();        if (!empty($sales_id)) {            $data['sales_details'] = $sales_details = $this->users->get_user_details($tenant_id, $sales_id);        }        $this->load->view('layout', $data);    }    /*     * General Report - Sales Enrolment  - Export to XLS     */  public function enrolment_report_export_xls() {       ini_set('memory_limit', '-1');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $sales_id = $this->input->get('sales_id');        $non_sales_id = $this->input->get('non_sales_id');         if(!empty($sales_id)){            $sales_id=$sales_id;        }else if(!empty($non_sales_id)){            $sales_id=$non_sales_id;        }         $abs_pr = $this->input->get('abs_pr');        if ($this->user->role_id == 'SLEXEC') {            $sales_id = $this->user->user_id;            $data['salesexec_check'] = 1;        }        if (!empty($sales_id)) {            $data['sales_details'] = $sales_details = $this->users->get_user_details($tenant_id, $sales_id);        }        $date_from = $this->input->get('from_date');        $date_to = $this->input->get('to_date');        $sort_by = ($this->input->get('f')) ? $this->input->get('f') : 'ce.enrolled_on';        $sort_order = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $start_date = $end_date = null;        if (!empty($date_from)) {            $start_date = date_format_mysql($date_from);        }        if (!empty($date_to)) {            $end_date = date_format_mysql($date_to);        }        list($results) = $this->reportsModel->get_enrolments_for_sales($tenant_id, $sales_id,$abs_pr, $start_date, $end_date, $sort_by, $sort_order, null, null);        $results = date_format_singapore_for_array($results, 'enrolment_date');        $tabledata = $results;        $meta_map = $this->meta->get_param_map();        $this->load->helper('export_helper');        $count_tabledata = count($tabledata);        $excel_titles = array('Course Name', 'Class Name', 'Tax Code', 'Trainee Name', 'Enrollment Date', 'Nationality', 'Trainee Contact Details');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++) {            $excel_data[$i][] = $tabledata[$i]['crse_name'];            $excel_data[$i][] = $tabledata[$i]['class_name'];            $excel_data[$i][] = $this->mask_format($tabledata[$i]['tax_code']);            $excel_data[$i][] = $tabledata[$i]['name'];            $excel_data[$i][] = $tabledata[$i]['enrolment_date'];            $excel_data[$i][] = $meta_map[$tabledata[$i]['country']];            $excel_data[$i][] = rtrim($tabledata[$i]['contact'], ', ');        }        $excel_filename = 'enrolment_report.xls';        $excel_sheetname = 'Enrolment Report';         $excel_main_heading = 'General Reports - Enrollment Report';        if (!empty($sales_id)){            $excel_main_heading = 'General Reports - Enrollment Report for Sales Executive ' . $sales_details->first_name . ' ' . $sales_details->last_name . '(' . $sales_details->tax_code . ') ' .            'Contact Detail: ' . $sales_details->contact_number . ', ' . $sales_details->off_email_id;        }        if (empty($start_date) && empty($end_date)) {            $period = ' for ' . date('F d Y, l');        } else {            $period = 'for the period';            if (!empty($start_date))                //echo $start_date;            $period .= ' from ' . date('F d Y', DateTime::createFromFormat('Y-m-d', $start_date)->getTimestamp());            if (!empty($end_date))                $period .= ' to ' . date('F d Y', DateTime::createFromFormat('Y-m-d', $end_date)->getTimestamp());        }        $excel_main_heading .= $period;              export_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }    /*     * General Report - Sales Enrolment  - Export to XLS     */    public function enrolment_report_export_pdf() {         ini_set('memory_limit', '-1');       $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $sales_id = $this->input->get('sales_id');           $non_sales_id = $this->input->get('non_sales_id');         if(!empty($sales_id)){            $sales_id=$sales_id;        }else if(!empty($non_sales_id)){            $sales_id=$non_sales_id;        }                $abs_pr = $this->input->get('abs_pr');          if ($this->user->role_id == 'SLEXEC') {            $sales_id = $this->user->user_id;            $data['salesexec_check'] = 1;        }        if (!empty($sales_id)) {            $sales_details = $this->users->get_user_details($tenant_id, $sales_id);        }                 $date_from = $this->input->get('from_date');        $date_to = $this->input->get('to_date');        $sort_by = ($this->input->get('f')) ? $this->input->get('f') : 'ce.enrolled_on';        $sort_order = ($this->input->get('o')) ? $this->input->get('o') : 'DESC';        $start_date = $end_date = null;        if (!empty($date_from)) {            $start_date = date_format_mysql($date_from);        }        if (!empty($date_to)) {            $end_date = date_format_mysql($date_to);        }        list($results) = $this->reportsModel->get_enrolments_for_sales($tenant_id, $sales_id,$abs_pr, $start_date, $end_date, $sort_by, $sort_order, null, null);        $results = date_format_singapore_for_array($results, 'enrolment_date');        $tabledata = $results;        $meta_map = $this->meta->get_param_map();        $pdf_main_heading = 'General Reports - Enrollment Report';        if (!empty($sales_id)){                $pdf_main_heading = 'General Reports - Enrollment Report for Sales Executive ' . $sales_details->first_name . ' ' . $sales_details->last_name . '(' . $sales_details->tax_code . ') ' .                'Contact Detail: ' . $sales_details->contact_number . ', ' . $sales_details->off_email_id;        }        if (empty($start_date) && empty($end_date)) {            $period = ' for ' . date('F d Y, l');        } else {            $period = 'for the period';            if (!empty($start_date))                $period .= ' from ' . date('F d Y', DateTime::createFromFormat('Y-m-d', $start_date)->getTimestamp());            if (!empty($end_date))                $period .= ' to ' . date('F d Y', DateTime::createFromFormat('Y-m-d', $end_date)->getTimestamp());        }        $pdf_main_heading .= $period;        $count_tabledata = count($tabledata);        for ($i = 0; $i < $count_tabledata; $i++) {            $tabledata[$i]['country'] = $meta_map[$tabledata[$i]['country']];            $tabledata[$i]['contact'] = rtrim($tabledata[$i]['contact'], ', ');        }        $this->load->helper('pdf_reports_helper');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $tenant_details = $this->tenantModel->get_tenant_details($tenant_id);        return generate_enrollment_reports_pdf($pdf_main_heading, $tabledata, $tenant_details);    }    /**     * get paid enrol_invoice (copied from class_trainee_company)     */    public function get_paid_invoice($is_json = 0) {        $matches = array();        $query_string = htmlspecialchars($_POST['q'], ENT_QUOTES, 'UTF-8');        $result = $this->classtraineemodel->get_paid_indi_company_invoice($this->tenant_id, $query_string);        if ($result) {            foreach ($result as $row) {                if ($row->inv_type == 'INVINDV') {                    $name = '(Name: ' . $row->first_name . ' ' . $row->last_name . ', Taxcode: ' . $row->tax_code . ')';                } else {                    $name = '(Name: ' . $row->company_name . ', Taxcode: ' . $row->comp_regist_num . ')';                }                $matches[] = array(                    'key' => $row->invoice_id,                    'label' => $row->invoice_id . $name,                    'value' => $row->invoice_id,                );            }        }        if (!empty($is_json)) {            return $matches;        } else {            echo json_encode($matches);            exit();        }    }    /**     * Get classes assigned to the selected course     */    public function get_classes_for_course() {        $courseId = $this->input->get('courseId');        header('Content-Type: application/json; charset=utf-8');        $classes = array();        foreach ($this->courseModel->get_classes_active_enrollment_courses($courseId)->result() as $class) {            $classes[] = array('class_id' => $class->class_id, 'class_name' => $class->class_name);        }        echo json_encode(array('success' => true, 'data' => $classes));    }    /**     * get class details     */    public function get_class_details() {        $classId = $this->input->get('classId');        header('Content-Type: application/json; charset=utf-8');        $class_details = $this->classModel->get_class_details($this->tenant_id, $classId);        $start_date = date('d-m-Y', strtotime($class_details->class_start_datetime));        $end_date = date('d-m-Y', strtotime($class_details->class_end_datetime));        echo json_encode(array('success' => true, 'start_date' => $start_date, 'end_date' => $end_date));    }    /**     * Get classes assigned to the selected course     */    public function get_classes_for_certificate_course() {        $courseId = $this->input->get('courseId');        header('Content-Type: application/json; charset=utf-8');        $classes = array();        foreach ($this->courseModel->get_classes_active_enrollment_certificate_courses($courseId)->result() as $class) {            $classes[] = array('class_id' => $class->class_id, 'class_name' => $class->class_name);        }        echo json_encode(array('success' => true, 'data' => $classes));    }    /**     * Get classes assigned to the selected course     */    public function get_completed_classes_for_course() {        $courseId = $this->input->get('courseId');        header('Content-Type: application/json; charset=utf-8');        $classes = array();        foreach ($this->courseModel->get_completed_classes_active_enrollment_for_courses($courseId)->result() as $class) {            $classes[] = array('class_id' => $class->class_id, 'class_name' => $class->class_name);        }        echo json_encode(array('success' => true, 'data' => $classes));    }    /**     *  Trainee Auto Complete List     */    public function getTraineesAutoCompleteList() {        $courseID = $this->input->get('courseID');        $classID = $this->input->get('classID');        $trainee = $this->input->get('trainee');        $tenantID = $this->session->userdata('userDetails')->tenant_id;        header('Content-Type: application/json; charset=utf-8');        $trainees = array();        $dbTrainees = $this->classtraineemodel->trainee_getAutoCompleteTraineesList($trainee, $tenantID, $courseID, $classID);        foreach ($dbTrainees as $trainee) {            $trainees[] = $trainee->first_name;        }        echo json_encode(array('success' => true, 'data' => $trainees));    }    /**     * WDA trainee autocomplete     */    public function get_all_trainee()     {        //$this->output->enable_profiler(TRUE);        $tenantID = $this->session->userdata('userDetails')->tenant_id;        $matches = array();        $trainee = htmlspecialchars($_POST['q'], ENT_QUOTES, 'UTF-8');        $courseID = $this->input->post('course_id');        $classID = $this->input->post('class_id');       //added by pritam        $comp_id = $this->input->post('comp_id');        if($comp_id)        {             $result = $this->reportsModel->trainee_getAutoCompleteTrainee_List($trainee, $tenantID, $courseID, $classID,$comp_id);        }        //end        else         {            $result = $this->classtraineemodel->trainee_getAutoCompleteTrainee_List($trainee, $tenantID, $courseID, $classID);        }                if ($result) {            foreach ($result as $row) {                $matches[] = array(                    'key' => $row->user_id,                    'label' => $row->first_name . ' ' . $row->last_name . ' (Tax Code: ' . $row->tax_code . ')('.$row->company_id.')',                    'value' => $row->first_name . ' ' . $row->last_name,                );            }        }        echo json_encode($matches);        exit();    }        /**     * get all the invoice no autocomplete     */        public function get_all_invoice()    {           $tenantID = $this->session->userdata('userDetails')->tenant_id;        $invoice_id = $this->input->post('q');         $result = $this->reportsModel->all_invoice($invoice_id, $tenantID);        $inv = array();        foreach ($result as $row)        {                $inv[] = array(                                'key' => $row->invoice_id,                                'label' => $row->invoice_id,                                'value' => $row->invoice_id                                );        }        echo json_encode($inv);        exit();    }    /////added by shubhranshu///    public function get_all_invoices()    {           $tenantID = $this->session->userdata('userDetails')->tenant_id;        $invoice_id = $this->input->post('q');         $result = $this->reportsModel->all_invoices($invoice_id, $tenantID);        $inv = array();        foreach ($result as $row)        {                $inv[] = array(                                'key' => $row->invoice_id,                                'label' => $row->invoice_id,                                'value' => $row->invoice_id                                );        }        echo json_encode($inv);        exit();    }/////added by shubhranshu///        /**     * WDA taxcode autocomplete     */    public function get_all_taxcode()     {        $tenantID = $this->session->userdata('userDetails')->tenant_id;        $matches = array();        $courseID = $this->input->post('course_id');        $classID = $this->input->post('class_id');        $taxcode = htmlspecialchars($_POST['q'], ENT_QUOTES, 'UTF-8');                        //added by pritam        $comp_id = $this->input->post('comp_id');        if($comp_id)        {             $result = $this->reportsModel->trainee_getAutoCompleteTaxcodeList($taxcode, $tenantID, $courseID, $classID,$comp_id);        }        //end        else         {            $result = $this->classtraineemodel->trainee_getAutoCompleteTaxcodeList($taxcode, $tenantID, $courseID, $classID);        }                        if ($result) {            foreach ($result as $row) {                $matches[] = array(                    'key' => $row->user_id,                    'label' => $row->tax_code . ' (Name: ' . $row->first_name . ' ' . $row->last_name . ')',                    'value' => $row->tax_code,                );            }        }        echo json_encode($matches);        exit();    }    /**     * Taxcode auto complete     */    public function getTaxcodeAutoCompleteList() {        $courseID = $this->input->get('courseID');        $classID = $this->input->get('classID');        $taxcode = $this->input->get('taxcode');        $tenantID = $this->session->userdata('userDetails')->tenant_id;        header('Content-Type: application/json; charset=utf-8');        $taxcodes = array();        $dbTrainees = $this->classtraineemodel->trainee_getAutoCompleteTaxcodeList($taxcode, $tenantID, $courseID, $classID);        foreach ($dbTrainees as $taxcode) {            $taxcodes[] = $taxcode->tax_code;        }        echo json_encode(array('success' => true, 'data' => $taxcodes));    }    /**     * Sales Executive Commission Payment Details by Sales Executive Id and Tenant Id     */    public function get_sales_payment() {        $tenant_id = $this->tenant_id;        $sales_id = $this->input->post(sales);        $result = $this->classModel->get_commission_payment($tenant_id, $sales_id);        foreach ($result as $k => $v) {            $result[$k]->paid_on = date('d/m/Y', strtotime($v->paid_on));        }        echo json_encode($result);        exit();    }    /**     * Function to get monthly enrollment count     */    public function monthly_enrollment_count() {        $data['sideMenuData'] = fetch_non_main_page_content();        $data = array();        $data['year_arr'] = array(            2015 => 2015, 2016 => 2016, 2017 => 2017, 2018 => 2018, 2019 => 2019, 2020 => 2020, 2021 => 2021        );        $year = $this->input->get('year');        $year = empty($year) ? date('Y') : $year;        $data['tabledata'] = $this->reportsModel->get_monthly_enrollment_count($year)->result();        $attendance_data = $this->reportsModel->get_monthly_attendance_count($year)->result();        $attendance = array();        foreach($attendance_data as $row){            $attendance[$row->month]=$row->count;        }        $data['att_data'] = $attendance;        $data['controllerurl'] = 'reports/monthly_enrollment_count';        $data['page_title'] = 'General Reports - Monthly Enrollment Count';        $data['main_content'] = 'reports/monthlyenrollmentcount';        $this->load->view('layout', $data);    }               /**     * Function to get monthly enrollment count XLS     */    public function monthly_enrollment_count_xls() {        $this->load->helper('export_helper');        $year = $this->input->get('year');        $year = empty($year) ? date('Y') : $year;        $tabledata = $this->reportsModel->get_monthly_enrollment_count($year)->result_array();        $attendance_data = $this->reportsModel->get_monthly_attendance_count($year)->result();        $attendance = array();        foreach($attendance_data as $row){            $attendance[$row->month]=$row->count;        }        $count_tabledata = count($tabledata);        $excel_titles = array('Month', 'Total Enrollments', 'Present`s Attendance Count    ');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++) {            $excel_data[$i][] = $tabledata[$i]['month'];            $excel_data[$i][] = $tabledata[$i]['count'];            $excel_data[$i][] = empty($attendance[$tabledata[$i]['month']])?0:$attendance[$tabledata[$i]['month']];        }        $excel_filename = 'Monthly Enrollment Count ' . $year . '.xls';        $excel_sheetname = 'Monthly Enrollment Count Report';        $excel_main_heading = 'General Reports - Monthly Enrollment Count Report for the year \'' . $year . '\'';        return export_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }    /**     * Function to get monthly enrollment count PDF     */    public function monthly_enrollment_count_pdf() {        $this->load->helper('pdf_reports_helper');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $tenant_details = $this->tenantModel->get_tenant_details($tenant_id);        $tenant_details->tenant_state = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_state), ', ');        $tenant_details->tenant_country = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_country), ', ');        $year = $this->input->get('year');        $year = empty($year) ? date('Y') : $year;        $tabledata = $this->reportsModel->get_monthly_enrollment_count($year)->result_array();        $attendance_data = $this->reportsModel->get_monthly_attendance_count($year)->result();        $attendance = array();        foreach($attendance_data as $row){            $attendance[$row->month]=$row->count;        }        $pdf_heading = 'General Reports - Monthly Enrollment Count Report for the year \'' . $year . '\'';                return generate_monthly_enrollment_count_pdf($pdf_heading, $tabledata, $tenant_details, $attendance);    }        //pritam    public function update_coll_on()    {      // $this->output->enable_profiler(TRUE);       $cert_col_on=  $this->input->post('cert_col');       $course=  $this->input->post('course_id');       $class=  $this->input->post('class_id');       $user=  $this->input->post('user_id');                  $insert_status = $this->reportsModel->update_coll_on($this->tenant_id,$course,$class,$cert_col_on,$user);       if($insert_status)       {            echo $cert_col_on;       }                  }    //pritam         public function enrollment_count() {         $data['sideMenuData'] = fetch_non_main_page_content();               $data = array();              $data['year_arr'] = array(''=>'Select year',2015 => 2015, 2016 => 2016, 2017 => 2017, 2018 => 2018, 2019 => 2019, 2020 => 2020);                $data['month_array'] = array(''=>'Select Month','01'=>Jan,'02'=>Feb,'03'=>Mar,'04'=>Apr,'05'=>May,'06'=>Jun,'07'=>Jul,'08'=>Aug,'09'=>Sep,'10'=>Oct,'11'=>Nov,'12'=>Dec);                $data['tenant_array'] = $this->reportsModel->get_all_tenant()->result_array();//        print_r($data['tenantarray']); exit();        $tenant_id = $this->input->get('tenant_id');        $fmonth = $this->input->get('fmonth');        $fyear = $this->input->get('fyear');         $lmonth = $this->input->get('lmonth');        $lyear = $this->input->get('lyear');            if($tenant_id == '')        {            $data['tenant_tabledata'] = $this->reportsModel->get_all_records()->result();                    }        else        {            $data['tabledata'] = $this->reportsModel->get_monthly_tenant_enrollment_count($tenant_id,$fyear,$fmonth,$lyear,$lmonth)->result_array();                       // print_r($data['tabledata']);                    }              $data['controllerurl'] = 'reports/enrollment_count';        $data['page_title'] = 'General Reports - Monthly Enrollment Count';        $data['main_content'] = 'reports/enrollment_count_page';        $this->load->view('layout', $data);    }        public function monthly_tenant_enrollment_count_pdf() {        $this->load->helper('pdf_reports_helper');        $tenant_id = $this->input->get('tenant_id');        $fmonth = $this->input->get('fmonth');        $fyear = $this->input->get('fyear');         $lmonth = $this->input->get('lmonth');        $lyear = $this->input->get('lyear');            $tenant_details = $this->tenantModel->get_tenant_details($tenant_id);        $tenant_details->tenant_state = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_state), ', ');        $tenant_details->tenant_country = rtrim($this->courseModel->get_metadata_on_parameter_id($tenant_details->tenant_country), ', ');        $tabledata = $this->reportsModel->get_monthly_tenant_enrollment_count($tenant_id,$fyear,$fmonth,$lyear,$lmonth)->result_array();                $pdf_heading = 'General Reports - Monthly Enrollment Count Report for the tenant - '.$tenant_details->tenant_name;                return generate_monthly_tenant_enrollment_count_pdf($pdf_heading, $tabledata, $tenant_details);    }        public function monthly_tenant_enrollment_count_xls() {        $this->load->helper('export_helper');        $tenant_id = $this->input->get('tenant_id');        $fmonth = $this->input->get('fmonth');        $fyear = $this->input->get('fyear');         $lmonth = $this->input->get('lmonth');        $lyear = $this->input->get('lyear');                 $tenant_details = $this->tenantModel->get_tenant_details($tenant_id);        $tabledata =$this->reportsModel->get_monthly_tenant_enrollment_count($tenant_id,$fyear,$fmonth,$lyear,$lmonth)->result_array();        $count_tabledata = count($tabledata);        $excel_titles = array('Tenant','Month', 'Year', 'Total Enrollments');        $excel_data = array();                  usort($tabledata, function($a, $b) {                    return strtotime($a['date']) - strtotime($b['date']);                });        for ($i = 0; $i < $count_tabledata; $i++) {                        $excel_data[$i][] = $tabledata[$i]['tenant_name'];            $excel_data[$i][] = $tabledata[$i]['month'];            $excel_data[$i][] = $tabledata[$i]['year'];            $excel_data[$i][] = $tabledata[$i]['count'];        }        $excel_filename = 'Monthly Enrollment Count ' . $tenant_details->tenant_name . '.xls';        $excel_sheetname = 'Monthly Enrollment Count Report';        $excel_main_heading = 'General Reports - Monthly Enrollment Count Report for the tenant - '.$tenant_details->tenant_name;        return export__tenant_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }        public function total_tenant_enrollment_count_pdf() {        $this->load->helper('pdf_reports_helper');        $tenant_tabledata = $this->reportsModel->get_all_records()->result_array();        $pdf_heading = 'General Reports - Total Enrollment Count Report';                return generate_total_tenant_enrollment_count_pdf($pdf_heading, $tenant_tabledata);    }        public function total_tenant_enrollment_count_xls() {        $this->load->helper('export_helper');        $tenant_tabledata = $this->reportsModel->get_all_records()->result_array();        $count_tabledata = count($tenant_tabledata);        $excel_titles = array('Tenant Name', 'Total Enrollments');        $excel_data = array();        for ($i = 0; $i < $count_tabledata; $i++)        {            $excel_data[$i][] = $tenant_tabledata[$i]['tenant_name'];            $excel_data[$i][] = $tenant_tabledata[$i]['total'];        }        $excel_filename = 'Tenant Enrollment Count.xls';        $excel_sheetname = 'Tenant Enrollment Count Report';        $excel_main_heading = 'General Reports - Tenant Enrollment Count Report';        return export__total_tenant_page_fields($excel_titles, $excel_data, $excel_filename, $excel_sheetname, $excel_main_heading);    }         public function attendance_archive()    {         $data['sideMenuData'] = fetch_non_main_page_content();        $this->load->model('activity_log_model', 'activitylog');        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        extract($_GET);        $data['course_list'] = $course_list = $this->activitylog->get_course_list($tenant_id);// get all course        if($course_id){            $course_classes = $this->activitylog->get_course_class($tenant_id, $course_id);            $data['classes'] = $course_classes;        }                $sort_by = $this->input->get('b');        $sort_order = $this->input->get('o');        $course_id = $this->input->get('course_id') ;        $class_id = $this->input->get('cls_id') ;        $subsidy = $this->input->get('subsidy'); // get subsidy type//        $course_id = '104';//        $class_id ='3279';                      $export_url = '?';        foreach ($_GET as $k => $v) {            $export_url .="$k=$v&";        }        $export_url = rtrim($export_url, '&');        $data['export_url'] = $export_url;        $data['sort_link'] = $sort_link = "course_id=" . $this->input->get('course_id') . "&cls_id=" . $this->input->get('cls_id'). "&subsidy=" . $this->input->get('subsidy');                      //        echo $this->db->last_query();//        if(!empty($course_id) && !empty($class_id))//        {         $data['tabledata'] = $this->reportsModel->get_archive_trainee($tenant_id,$course_id,$class_id,$subsidy);     //        }//         exit;        $data['class_schedule'] = $this->class->get_all_class_schedule($tenant_id, $class_id);        $data['controllerurl'] = 'class_trainee/attendance_archive';        $data['page_title'] = 'General Reports - Attendance Archive';        $data['main_content'] = 'reports/att_archive';        $this->load->view('layout', $data);          }       public function export_archive_page() {        $course_id = $this->input->get('course_id');        $class_id = $this->input->get('cls_id');        $subsidy = $this->input->get('subsidy');        set_time_limit(0);        ini_set("memory_limit","-1");        $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_name = $this->courseModel->get_course_name($tenant_id,$course_id);         $class_name = $this->classModel->get_class_name($tenant_id,$class_id);//        echo $this->db->last_query();//        exit;        $result = $this->reportsModel->get_archive_trainee($tenant_id,$course_id,$class_id,$subsidy);        $this->load->helper('export_helper');        export_archive_trainee($result,$course_name,$class_name);    }        public function export_archive_pdf() {        $course_id = $this->input->get('course_id');        $class_id = $this->input->get('cls_id');        $subsidy = $this->input->get('subsidy');               $tenant_id = $this->session->userdata('userDetails')->tenant_id;        $course_name = $this->courseModel->get_course_name($tenant_id,$course_id);         $class_name = $this->classModel->get_class_name($tenant_id,$class_id);          $tenant_details = $this->classtraineemodel->get_tenant_masters($tenant_id);//        echo $this->db->last_query();//        exit;        $result = $this->reportsModel->get_archive_trainee($tenant_id,$course_id,$class_id,$subsidy);               $this->load->helper('pdf_reports_helper');        archive_trainee_pdf($result,$course_name,$class_name,$tenant_details);    }       /////added by shubhranshu for company name search by invoice number    public function search_company_name(){        $data['sideMenuData'] = fetch_non_main_page_content();        $data['controllerurl'] = 'class_trainee/attendance_archive';        $data['page_title'] = 'General Reports - Search Company Name By Invoice Number';        $data['main_content'] = 'reports/search_company';        $this->load->view('layout', $data);    }        ////below function added by shubhranshu to search the company name by invoice id    public function tms_report_search_company_name(){       $invoice_no = $this->input->post('invoice_no');        $res = $this->reportsModel->fetch_company_name_by_invoice_id($invoice_no);       if($res[current]->company_name !=''){           $res1->company_name = $res[current]->company_name;           $res1->status = 'Status: Current';           echo json_encode($res1);       }else if($res[old]->company_name !=''){            $res1->company_name = $res[old]->company_name;            $res1->status = 'Status: Regenerated/Deleted';            echo json_encode($res1);       }else{           $res1->company_name='Please Enter a Company Invoice';           $res1->status = '';            echo json_encode($res1);        }           }            /////added by shubhranshu for new enrolment report tpg on 19.11.2020    public function enrolment_report_for_tpg(){                $data['sideMenuData'] = fetch_non_main_page_content();                $data['page_title'] = 'General Reports - Enrolment Report TPG';        $data['main_content'] = 'reports/enrolment_report_tpg';                $class_id = $this->input->get('class');         $course_id = $this->input->get('course');                  $tenant_id = $this->tenant_id;                 $data['courses'] = $courses = $this->course->get_active_course_list_by_tenant($tenant_id, 'classTrainee');        if ($course_id) {                        $course_classes = $this->class->get_course_class($tenant_id, $course_id,"","","classTrainee");            $data['classes'] = $course_classes;        }        $data['export_url'] = '?course='.$course_id.'&class='.$class_id;        $sort_url = '';        $data['error_msg']= 'Kindly apply filter to fetch the trainees';////ssp/////        if(!empty($class_id) && !empty($course_id)){           $data['tabledata'] = $this->reportsModel->enrolment_report_tpg_fetchdata($tenant_id,$class_id,$course_id);                   }                if(empty($data['tabledata']) && !empty($class_id)){            $data['error_msg'] = 'There are no trainees enrolled to any class currently.';        }else{            $data['error_msg'] = 'Please Select a Filter to Display The Data.';        }                $this->load->view('layout', $data);    }        /////added by shubhranshu for new enrolment report xls tpg on 19.11.2020    public function export_enrolment_report_for_tpg(){        $tenant_id = $this->tenant_id;              $course = ($this->input->get('course')) ? $this->input->get('course') : '';        $class = ($this->input->get('class')) ? $this->input->get('class') : '';                $result = $this->reportsModel->enrolment_report_tpg_fetchdata($tenant_id, $class,$course);        $this->load->helper('export_helper');        export_enrolment_report_for_tpg_full($result, $tenant_id);    }        /**     * Tenant : Fonda     * Requested on 12-10-2021     * Developed by : Abdulla Nofal     *      */    public function class_report() {                $data['sideMenuData'] = fetch_non_main_page_content();                $data['page_title'] = 'General Reports - Class Report';        $data['main_content'] = 'reports/class_report';                $class_id = $this->input->get('class');         $course_id = $this->input->get('course');                  $tenant_id = $this->tenant_id;                 $data['courses'] = $courses = $this->course->get_active_course_list_by_tenant($tenant_id, 'classTrainee');        if ($course_id) {                        $course_classes = $this->class->get_course_class($tenant_id, $course_id,"","","classTrainee");            $data['classes'] = $course_classes;        }        $data['export_url'] = '?course='.$course_id.'&class='.$class_id;        $sort_url = '';        $data['error_msg']= 'Kindly apply filter to fetch the trainees';////ssp/////        if(!empty($class_id) && !empty($course_id)){           $data['tabledata'] = $this->reportsModel->class_report($tenant_id, $class_id, $course_id);                   }                if(empty($data['tabledata']) && !empty($class_id)){            $data['error_msg'] = 'There are no trainees enrolled to this class currently.';        }else{            $data['error_msg'] = 'Please Select a Filter to Display The Data.';        }                $this->load->view('layout', $data);    }        /**     * Tenant : Fonda     * Requested on 12-10-2021     * Developed by : Abdulla Nofal     * Export : XLS format     *      */    public function export_class_report() {        $tenant_id = $this->tenant_id;              $course = ($this->input->get('course')) ? $this->input->get('course') : '';        $class = ($this->input->get('class')) ? $this->input->get('class') : '';                $result = $this->reportsModel->class_report($tenant_id, $class, $course);        $this->load->helper('export_helper');        export_class_report_full($result, $tenant_id);    } }